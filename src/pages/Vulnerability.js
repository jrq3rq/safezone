import React, { useEffect } from 'react';
import L from 'leaflet';
import 'leaflet/dist/leaflet.css';
import { Link } from 'react-router-dom';
import '../styles/Vulnerability.css';

// Mock data for vulnerability scores (replace with real API data)
const riskData = [
  { id: 1, name: "New York, NY", lat: 40.7128, lng: -74.0060, riskScore: 85, popDensity: 27000, policeRatio: 0.004, trainingBudget: 1200000 },
  { id: 2, name: "Los Angeles, CA", lat: 34.0522, lng: -118.2437, riskScore: 78, popDensity: 8400, policeRatio: 0.0025, trainingBudget: 900000 },
  { id: 3, name: "Chicago, IL", lat: 41.8781, lng: -87.6298, riskScore: 72, popDensity: 11800, policeRatio: 0.0032, trainingBudget: 800000 },
  { id: 4, name: "Houston, TX", lat: 29.7604, lng: -95.3698, riskScore: 65, popDensity: 3700, policeRatio: 0.0028, trainingBudget: 600000 },
  { id: 5, name: "Phoenix, AZ", lat: 33.4484, lng: -112.0740, riskScore: 60, popDensity: 3200, policeRatio: 0.0021, trainingBudget: 500000 },
  { id: 6, name: "Philadelphia, PA", lat: 39.9526, lng: -75.1652, riskScore: 68, popDensity: 11600, policeRatio: 0.0035, trainingBudget: 700000 },
  { id: 7, name: "San Antonio, TX", lat: 29.4241, lng: -98.4936, riskScore: 55, popDensity: 3200, policeRatio: 0.0024, trainingBudget: 450000 },
  { id: 8, name: "San Diego, CA", lat: 32.7157, lng: -117.1611, riskScore: 62, popDensity: 4300, policeRatio: 0.0027, trainingBudget: 650000 },
  { id: 9, name: "Dallas, TX", lat: 32.7767, lng: -96.7970, riskScore: 58, popDensity: 3900, policeRatio: 0.0023, trainingBudget: 550000 },
  { id: 10, name: "San Jose, CA", lat: 37.3382, lng: -121.8863, riskScore: 64, popDensity: 5700, policeRatio: 0.0026, trainingBudget: 600000 },
];

function Vulnerability() {
  useEffect(() => {
    // Initialize Leaflet map
    const map = L.map('vulnerability-map').setView([39.8283, -98.5795], 4); // Center of U.S.
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: 'Â© OpenStreetMap contributors',
      maxZoom: 18,
    }).addTo(map);

    // Add heat map markers for risk areas
    riskData.forEach((area) => {
      const color = area.riskScore > 75 ? '#ff0000' : area.riskScore > 60 ? '#ffa500' : '#008000';
      L.circleMarker([area.lat, area.lng], {
        radius: 10,
        fillColor: color,
        color: color,
        weight: 1,
        opacity: 1,
        fillOpacity: 0.8,
      })
        .addTo(map)
        .bindPopup(`
          <b>${area.name}</b><br>
          Risk Score: ${area.riskScore}<br>
          Population Density: ${area.popDensity} /sq mi<br>
          Police per Capita: ${area.policeRatio}<br>
          Training Budget: $${area.trainingBudget.toLocaleString()}
        `);
    });

    // Cleanup map on component unmount
    return () => map.remove();
  }, []);

  return (
    <div className="vulnerability-container">
      <h1 className="vulnerability-title">Vulnerability Forecaster</h1>
      <p className="vulnerability-description">
        Identify high-risk areas across the U.S. using our interactive heat map, based on population density, police resources, and training budgets.
      </p>
      <section className="vulnerability-section">
        <h2 className="vulnerability-section-title">Risk Analysis</h2>
        <div id="vulnerability-map" className="vulnerability-map"></div>
        <ul className="vulnerability-section-list">
          {riskData.map((area) => (
            <li key={area.id}>
              <strong>{area.name}:</strong> Risk Score {area.riskScore} | Pop. Density: {area.popDensity}/sq mi | Police Ratio: {area.policeRatio} | Training Budget: ${area.trainingBudget.toLocaleString()}
              <Link to="/evacuation" className="vulnerability-section-link"> Plan Evacuation</Link>
            </li>
          ))}
        </ul>
      </section>
    </div>
  );
}

export default Vulnerability;